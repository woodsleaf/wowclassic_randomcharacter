import random

class Race:
    def __init__(self, name, allowed_classes, racial_bonus):
        self.name = name
        self.allowed_classes = set(allowed_classes)  # Список ключей классов
        self.racial_bonus = racial_bonus

    def __str__(self):
        return self.name

class Class:
    def __init__(self, name, allowed_professions, hardcore_tip):
        self.name = name
        self.allowed_professions = set(allowed_professions)  # Список ключей профессий
        self.hardcore_tip = hardcore_tip

    def __str__(self):
        return self.name

class Profession:
    def __init__(self, name):
        self.name = name

    def __str__(self):
        return self.name

def rnd(x, y):
    return(random.randint(x,y))

def rndc(arr):
    return random.choice(arr)

def rnd_dict_value(dictionary):
    return random.choice(list(dictionary.values()))

# Данные
professions_list = ['Горное дело', 'Снятие шкур', 'Травничество', 'Кузнечное дело', 'Инженерное дело', 'Ювелирное дело', 'Кожевничество', 'Алхимия', 'Портняжное дело', 'Наложение чар']
professions = {name: Profession(name) for name in professions_list}  # Создаем словарь

fractions = ['Альянс', 'Орда']

all_cls   = ['Воин', 'Паладин', 'Рога', 'Прист', 'Маг', 'Чернокнижник', 'Охотник', 'Друид', 'Шаман']

classes = {
    "Воин": Class("Воин", ['Кузнечное дело', 'Инженерное дело', 'Ювелирное дело', 'Алхимия', 'Наложение чар'], "Будьте осторожны в одиночку, ищите группу. Всегда имейте бинты."),
    "Паладин": Class("Паладин", ['Кузнечное дело', 'Инженерное дело', 'Ювелирное дело', 'Алхимия', 'Наложение чар'], "Используйте баффы и исцеление для выживания. Будьте поддержкой для группы."),
    "Рога": Class("Рога", ['Снятие шкур', 'Кузнечное дело', 'Инженерное дело', 'Ювелирное дело', 'Кожевничество', 'Алхимия', 'Наложение чар'], "Скрытность - ваш лучший друг. Избегайте открытого боя."),
    "Прист": Class("Прист", ['Кузнечное дело', 'Инженерное дело', 'Ювелирное дело', 'Алхимия', 'Портняжное дело', 'Наложение чар'], "Лечите и поддерживайте группу. Избегайте прямого урона."),
    "Маг": Class("Маг", ['Кузнечное дело', 'Инженерное дело', 'Ювелирное дело', 'Алхимия', 'Портняжное дело', 'Наложение чар'], "Держите дистанцию и используйте контроль. Будьте осторожны с маной."),
    "Чернокнижник": Class("Чернокнижник", ['Кузнечное дело', 'Инженерное дело', 'Ювелирное дело', 'Алхимия', 'Портняжное дело', 'Наложение чар'], "Призывайте питомцев для защиты. Используйте контроль и заклинания страха."),
    "Охотник": Class("Охотник", ['Снятие шкур', 'Кузнечное дело', 'Инженерное дело', 'Ювелирное дело', 'Кожевничество', 'Алхимия', 'Наложение чар'], "Держитесь подальше от врагов. Используйте питомца для танкования."),
    "Друид": Class("Друид", ['Снятие шкур', 'Кузнечное дело', 'Инженерное дело', 'Ювелирное дело', 'Кожевничество', 'Алхимия', 'Наложение чар'], "Универсальный класс. Подстраивайтесь под ситуацию."),
    "Шаман": Class("Шаман", ['Снятие шкур', 'Кузнечное дело', 'Инженерное дело', 'Ювелирное дело', 'Кожевничество', 'Алхимия', 'Наложение чар'], "Поддержка и урон в одном лице. Грамотно используйте тотемы.")
}

all_races = ['Человек', 'Дварф', 'Ночной эльф', 'Гном', 'Высший эльф', 'Орк', 'Нежить', 'Таурен', 'Тролль', 'Гоблин']

races = {
    "Человек": Race("Человек", ['Воин', 'Паладин', 'Рога', 'Прист', 'Маг', 'Чернокнижник', 'Охотник'], "Бонус к репутации."),
    "Дварф": Race("Дварф", ['Воин', 'Паладин', 'Охотник', 'Рога', 'Прист', 'Маг'], "Сопротивление холоду."),
    "Ночной эльф": Race("Ночной эльф", ['Воин', 'Охотник', 'Рога', 'Прист', 'Друид'], "Улучшенный стелс."),
    "Гном": Race("Гном", ['Воин', 'Рога', 'Маг', 'Чернокнижник', 'Охотник'], "Сопротивление магии тайны."),
    "Высший эльф": Race("Высший эльф",  ['Воин', 'Охотник', 'Рога', 'Прист', 'Маг', 'Паладин'], "Бонус к интеллекту."),
    "Орк": Race("Орк", ['Воин', 'Охотник', 'Рога', 'Шаман', 'Чернокнижник', 'Маг'], "Бонус к силе атаки."),
    "Нежить": Race("Нежить", ['Воин', 'Рога', 'Прист', 'Маг', 'Чернокнижник', 'Охотник'], "Сопротивление контролю."),
    "Таурен": Race("Таурен", ['Воин', 'Охотник', 'Шаман', 'Друид'], "Увеличенный запас здоровья."),
    "Тролль": Race("Тролль", ['Воин', 'Охотник', 'Рога', 'Прист', 'Шаман', 'Маг', 'Чернокнижник'], "Ускоренная регенерация."),
    "Гоблин": Race("Гоблин", ['Воин', 'Охотник', 'Рога', 'Маг', 'Чернокнижник'], "Скидки у торговцев.")
}

race_fraction = [
    [0, 1, 2, 3, 4], #0 alliance
    [5, 6, 7, 8, 9]  #1 orda
]

GENDERS = ["Мужской", "Женский"]


def ask_fraction(raceid):
    for items in race_fraction:
        for item in items:
            if  raceid == item:
                return race_fraction.index(items)

def find_key_by_value(dictionary, value):
    for key, val in dictionary.items():
        if val == value:
            return key
    return None


#Выбор рассы
chosen_r = rnd_dict_value(races)
raceid = all_races.index(chosen_r.name)

#Выбор класса
allowed_classes = [classes[name] for name in chosen_r.allowed_classes]
chosen_c = rndc(allowed_classes)
classid = all_cls.index(chosen_c.name)

# Определение фракции
chosen_f = fractions[ask_fraction(raceid)]

#Выбор первой профессии
listprof = [professions[name] for name in chosen_c.allowed_professions]
chosen_p = rndc(listprof)

# Выбор пола
chosen_gender = rndc(GENDERS)

print("----- Сгенерированный персонаж для Hardcore WoW -----")
print(f"Фракция: {chosen_f}")
print(f"Раса: {chosen_r}, Пол: {chosen_gender}")
print(f"Класс: {chosen_c}")
print(f"Первая профессия: {chosen_p}")
print("-" * 40)  # Разделитель
print(f"Расовый бонус: {chosen_r.racial_bonus}")
print(f"Советы для хардкора: {chosen_c.hardcore_tip}")
print("-" * 40)  # Разделитель
print('Крутим гачу на вид персонажа: ' + str(rnd(0,20)) + ' раз(а)')
print('Созвездие для WOTLK: ' + str(rnd(-8,8)))
